// User ржоржбрзЗрж▓: ржЗржЙржЬрж╛рж░рзЗрж░ ржирж╛ржо, ржЗржорзЗржЗрж▓, ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржПржмржВ role рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзЗред
// ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб рж╕рзЗржн ржХрж░рж╛рж░ ржЖржЧрзЗ рж╣рзНржпрж╛рж╢ ржХрж░рж╛ рж╣рзЯ ржПржмржВ `matchPassword` ржорзЗржержб ржжрж┐рзЯрзЗ ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛ ржпрж╛рзЯред
// (ржмрж╛ржВрж▓рж╛ ржХржорзЗржирзНржЯрж╕) - рж▓ржХрзНрж╖рзНржп: ржбрж╛ржЯрж╛ржмрзЗржЗржЬ рж╕рзНржХрж┐ржорж╛ ржжрзНрж░рзБржд ржмрзЛржЭрж╛
// ЁЯУБ models/User.js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
  fullName: {
    type: String,
    required: true // ЁЯФН ржкрзВрж░рзНржг ржирж╛ржо ржЖржмрж╢рзНржпржХ
  },
  email: {
    type: String,
    required: true,
    unique: true // ЁЯУз ржЗржорзЗржЗрж▓ ржЗржЙржирж┐ржХ рж╣рждрзЗ рж╣ржмрзЗ
  },
  password: {
    type: String,
    required: true // ЁЯФР ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржЖржмрж╢рзНржпржХ
  },
  role: {
    type: String,
    enum: ['super-admin', 'admin', 'teacher', 'accountant', 'librarian', 'receptionist', 'parents', 'student'],
    default: 'student' // ЁЯОУ ржбрж┐ржлрж▓рзНржЯ рж░рзЛрж▓
  }
}, { timestamps: true });

// ЁЯФР ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб рж╣рзНржпрж╛рж╢ ржХрж░рж╛рж░ ржЬржирзНржп pre-save hook
userSchema.pre('save', async function (next) {
  if (!this.isModified('password')) return next();
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

// ЁЯФН ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржпрж╛ржЪрж╛ржЗ ржлрж╛ржВрж╢ржи
userSchema.methods.matchPassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

module.exports = mongoose.model('User', userSchema);
