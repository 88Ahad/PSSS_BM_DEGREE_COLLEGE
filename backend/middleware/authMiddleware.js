// ‡¶è‡¶á ‡¶Æ‡¶ø‡¶°‡¶≤‡¶ì‡¶Ø‡¶º‡ßç‡¶Ø‡¶æ‡¶∞‡¶ü‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß‡ßá‡¶∞ Authorization ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá JWT ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶®‡¶ø‡ßü‡ßá
// ‡¶§‡¶æ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç `req.user`-‡¶è ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ‡¶ï‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßá‡•§
// ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: router.get('/protected', protect, handler)
// (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ï‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡¶∏) - ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø: ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤ ‡¶∏‡¶π‡¶ú ‡¶ï‡¶∞‡ßá ‡¶§‡ßã‡¶≤‡¶æ
// üìÅ middleware/authMiddleware.js
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const protect = async (req, res, next) => {
  // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá Authorization header ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶ø
  let token = req.headers.authorization?.split(' ')[1];

  // ‡¶Ø‡¶¶‡¶ø header ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶ñ‡¶® HttpOnly cookie ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá (migration mode)
  if (!token && req.cookies && req.cookies.token) {
    token = req.cookies.token;
  }

  if (!token) return res.status(401).json({ message: '‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ö‡¶®‡ßÅ‡¶™‡¶∏‡ßç‡¶•‡¶ø‡¶§' });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = await User.findById(decoded.id).select('-password');
    next();
  } catch (error) {
    res.status(401).json({ message: '‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ö‡¶¨‡ßà‡¶ß' });
  }
};

module.exports = protect;
